#!/usr/bin/python
"""
Functions to generate lag-times for events detected by correlation.

Part of the EQcorrscan module to integrate seisan nordic files into a full
cross-channel correlation for detection routine.
EQcorrscan is a python module designed to run match filter routines for
seismology, within it are routines for integration to seisan and obspy.
With obspy integration (which is necessary) all main waveform formats can be
read in and output.

This main section contains a script, LFE_search.py which demonstrates the usage
of the built in functions from template generation from picked waveforms
through detection by match filter of continuous data to the generation of lag
times to be used for relative locations.

The match-filter routine described here was used a previous Matlab code for the
Chamberlain et al. 2014 G-cubed publication.  The basis for the lag-time
generation section is outlined in Hardebeck & Shelly 2011, GRL.

Code generated by Calum John Chamberlain of Victoria University of Wellington,
2015.

All rights reserved.

Pre-requisites:
    gcc             - for the installation of the openCV correlation routine
    python-joblib   - used for parallel processing
    python-obspy    - used for lots of common seismological processing
                    - requires:
                        numpy
                        scipy
                        matplotlib
    python-pylab    - used for plotting
"""
import numpy as np
from match_filter import DETECTION, normxcorr2

def lag_gen(trace, template):
    """
    Function to calculate the optimal lag-time for a single trace and template
    trace.

    :type trace: obspy.Trace
    :param trace: Detected event, should be longer than template, but not
                excessively long.
    :type template: obspy.Trace
    :param template: Template trace for the trace.

    :returns: float, lagtime in seconds
    """
    lagtime=0.0
    ccc=normxcorr2(template.data, trace.data)
    lagtime = np.argmax(ccc) * trace.stats.delta
    return lagtime

def channel_loop(detection, template):
    """
    Utility function to take a stream of data for the detected event and parse
    the correct data to lag_gen

    :type detection: obspy.Stream
    :type template: obspy.Stream

    :returns: lagtimes
    """
    lagtimes=[]
    return lagtimes
